{
	"info": {
		"_postman_id": "5c8f7acc-6aa4-4e7f-b3be-f34eb7e64f53",
		"name": "fonixss",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26606525"
	},
	"item": [
		{
			"name": "create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response content type is XML\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"xml\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response is not null\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.not.be.null;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the XML schema against the expected structure\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('contacts'); // Assuming 'contacts' is the expected root key\r",
							"    pm.expect(responseData.contacts).to.be.an('array'); // Check if 'contacts' is an array\r",
							"\r",
							"    responseData.contacts.forEach(contact => {\r",
							"        pm.expect(contact).to.have.all.keys('email', 'age', 'name'); // Assuming these are the expected keys for each contact\r",
							"        pm.expect(contact.email).to.be.a('string').that.matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
							"        pm.expect(contact.age).to.be.a('number').that.is.at.least(0, \"Age should be a non-negative number\");\r",
							"        pm.expect(contact.name).to.be.a('string').that.is.not.empty; // Check if name is a non-empty string\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Hasitha Manohara\",\r\n  \"email\": \"hasitha@gmail.com\",\r\n  \"phone\": \"0712345678\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/contacts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "update",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Updated Name\",\r\n  \"email\": \"updated@example.com\",\r\n  \"phone\": \"0700000000\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/contacts/686d9e0c8fca6a1f32dc1724",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"contacts",
						"686d9e0c8fca6a1f32dc1724"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Updated Name\",\r\n  \"email\": \"updated@example.com\",\r\n  \"phone\": \"0700000000\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/contacts/686d9e0c8fca6a1f32dc1724",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"contacts",
						"686d9e0c8fca6a1f32dc1724"
					]
				}
			},
			"response": []
		},
		{
			"name": "getAll",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/api/contacts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		}
	]
}